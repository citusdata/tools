citus (10.0.3.citus-1) stable; urgency=low

  * Prevents infinite recursion for queries that involve `UNION ALL`
  below `JOIN`

  * Fixes a crash in queries with a modifying `CTE` and a `SELECT`
  without `FROM`

  * Fixes upgrade and downgrade paths for `citus_update_table_statistics`

  * Fixes a bug that causes `SELECT` queries to use 2PC unnecessarily

  * Fixes a bug that might cause self-deadlocks with
  `CREATE INDEX` / `REINDEX CONCURRENTLY` commands

  * Adds `citus.max_cached_connection_lifetime` GUC to set maximum connection
  lifetime

  * Adds `citus.remote_copy_flush_threshold` GUC that controls
  per-shard memory usages by `COPY`

  * Adds `citus_get_active_worker_nodes` UDF to deprecate
  `master_get_active_worker_nodes`

  * Skips 2PC for readonly connections in a transaction

  * Makes sure that local execution starts coordinated transaction

  * Removes open temporary file warning when cancelling a query with
  an open tuple store

  * Relaxes the locks when adding an existing node

 -- Gurkan Indibay <gindibay@microsoft.com>  Thu, 18 Mar 2021 01:40:08 +0000

citus (10.0.2.citus-1) stable; urgency=low

  * Adds a configure flag to enforce security

  * Fixes a bug due to cross join without target list

  * Fixes a bug with UNION ALL on PG 13

  * Fixes a compatibility issue with pg_audit in utility calls

  * Fixes insert query with CTEs/sublinks/subqueries etc

  * Grants SELECT permission on citus_tables view to public

  * Grants SELECT permission on columnar metadata tables to public

  * Improves citus_update_table_statistics and provides distributed deadlock
  detection

  * Preserves colocation with procedures in alter_distributed_table

  * Prevents using alter_columnar_table_set and alter_columnar_table_reset
  on a columnar table not owned by the user

  * Removes limits around long table names

 -- Gurkan Indibay <gindibay@microsoft.com>  Thu, 4 Mar 2021 2:46:54 +0000

citus (9.5.2.citus-1) stable; urgency=low

  * Fixes distributed deadlock detection being blocked by metadata sync

  * Prevents segfaults when SAVEPOINT handling cannot recover from connection
  failures

  * Fixes possible issues that might occur with single shard distributed tables

 -- gurkanindibay <gindibay@microsoft.com>  Wed, 27 Jan 2021 11:25:38 +0000

citus (9.4.4.citus-1) stable; urgency=low

  * Fixes a bug that could cause router queries with local tables to be pushed
  down

  * Fixes a segfault in connection management due to invalid connection hash
  entries

  * Fixes possible issues that might occur with single shard distributed tables

 -- gurkanindibay <gindibay@microsoft.com>  Tue, 5 Jan 2021 14:58:56 +0000

citus (9.5.1.citus-1) stable; urgency=low

  * Enables PostgreSQL's parallel queries on EXPLAIN ANALYZE

  * Fixes a bug that could cause excessive memory consumption when a partition is
  created

  * Fixes a bug that triggers subplan executions unnecessarily with cursors

  * Fixes a segfault in connection management due to invalid connection hash
  entries

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 2 Dec 2020 14:28:44 +0000

citus (9.4.3.citus-1) stable; urgency=low

  * Enables PostgreSQL's parallel queries on EXPLAIN ANALYZE

  * Fixes a bug that triggers subplan executions unnecessarily with cursors

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Tue, 24 Nov 2020 11:17:57 +0000

citus (9.5.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 13

  * Removes the task-tracker executor

  * Introduces citus local tables

  * Introduces undistribute_table UDF to convert tables back to postgres tables

  * Adds support for EXPLAIN (ANALYZE) EXECUTE and EXPLAIN EXECUTE

  * Adds support for EXPLAIN (ANALYZE, WAL) for PG13

  * Sorts the output of EXPLAIN (ANALYZE) by execution duration.

  * Adds support for CREATE TABLE ... USING table_access_method

  * Adds support for WITH TIES option in SELECT and INSERT SELECT queries

  * Avoids taking multi-shard locks on workers

  * Enforces citus.max_shared_pool_size config in COPY queries

  * Enables custom aggregates with multiple parameters to be executed on workers

  * Enforces citus.max_intermediate_result_size in local execution

  * Improves cost estimation of INSERT SELECT plans

  * Introduces delegation of procedures that read from reference tables

  * Prevents pull-push execution for simple pushdownable subqueries

  * Improves error message when creating a foreign key to a local table

  * Makes citus_prepare_pg_upgrade idempotent by dropping transition tables

  * Disallows ON TRUE outer joins with reference & distributed tables when
  reference table is outer relation to avoid incorrect results

  * Disallows field indirection in INSERT/UPDATE queries to avoid incorrect
  results

  * Disallows volatile functions in UPDATE subqueries to avoid incorrect results

  * Fixes CREATE INDEX CONCURRENTLY crash with local execution

  * Fixes citus_finish_pg_upgrade to drop all backup tables

  * Fixes a bug that cause failures when RECURSIVE VIEW joined reference table

  * Fixes DROP SEQUENCE failures when metadata syncing is enabled

  * Fixes a bug that caused CREATE TABLE with CHECK constraint to fail

  * Fixes a bug that could cause VACUUM to deadlock

  * Fixes master_update_node failure when no background worker slots are available

  * Fixes a bug that caused replica identity to not be propagated on shard repair

  * Fixes a bug that could cause crashes after connection timeouts

  * Fixes a bug that could cause crashes with certain compile flags

  * Fixes a bug that could cause deadlocks on CREATE INDEX

  * Fixes a bug with genetic query optimization in outer joins

  * Fixes a crash when aggregating empty tables

  * Fixes a crash with inserting domain constrained composite types

  * Fixes a crash with multi-row & router INSERT's in local execution

  * Fixes a possibility of doing temporary file cleanup more than once

  * Fixes incorrect setting of join related fields

  * Fixes memory issues around deparsing index commands

  * Fixes reference table access tracking for sequential execution

  * Fixes removal of a single node with only reference tables

  * Fixes sending commands to coordinator when it is added as a worker

  * Fixes write queries with const expressions and COLLATE in various places

  * Fixes wrong cancellation message about distributed deadlock

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 11 Nov 2020 15:00:27 +0000

citus (9.4.2.citus-1) stable; urgency=low

  * Fixes a bug that could lead to multiple maintenance daemons

  * Fixes an issue preventing views in reference table modifications

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Thu, 22 Oct 2020 8:53:44 +0000

citus (9.4.1.citus-1) stable; urgency=low

  * Fixes EXPLAIN ANALYZE output truncation

  * Fixes a deadlock during transaction recovery

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 30 Sep 2020 9:33:46 +0000

citus (9.4.0.citus-1) stable; urgency=low

  * Improves COPY by honoring max_adaptive_executor_pool_size config

  * Adds support for insert into local table select from distributed table

  * Adds support to partially push down tdigest aggregates

  * Adds support for receiving binary encoded results from workers using
  citus.enable_binary_protocol

  * Enables joins between local tables and CTEs

  * Adds showing query text in EXPLAIN output when explain verbose is true

  * Adds support for showing CTE statistics in EXPLAIN ANALYZE

  * Adds support for showing amount of data received in EXPLAIN ANALYZE

  * Introduces downgrade paths in migration scripts

  * Avoids returning incorrect results when changing roles in a transaction

  * Fixes ALTER TABLE IF EXISTS SET SCHEMA with non-existing table bug

  * Fixes CREATE INDEX CONCURRENTLY with no index name on a postgres table bug

  * Fixes a bug that could cause crashes with certain compile flags

  * Fixes a bug with lists of configuration values in ALTER ROLE SET statements

  * Fixes a bug that occurs when coordinator is added as a worker node

  * Fixes a crash because of overflow in partition id with certain compile flags

  * Fixes a crash that may happen if no worker nodes are added

  * Fixes a crash that occurs when inserting implicitly coerced constants

  * Fixes a crash when aggregating empty tables

  * Fixes a memory leak in subtransaction memory handling

  * Fixes crash when using rollback to savepoint after cancellation of DML

  * Fixes deparsing for queries with anonymous column references

  * Fixes distribution of composite types failing to include typemods

  * Fixes explain analyze on adaptive executor repartitions

  * Fixes possible error throwing in abort handle

  * Fixes segfault when evaluating func calls with default params on coordinator

  * Fixes several EXPLAIN ANALYZE issues

  * Fixes write queries with const expressions and COLLATE in various places

  * Fixes wrong cancellation message about distributed deadlocks

  * Reports correct INSERT/SELECT method in EXPLAIN

  * Disallows triggers on citus tables

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Tue, 28 Jul 2020 13:22:31 +0000

citus (9.3.5.citus-1) stable; urgency=low

  * Fixes ALTER TABLE IF EXISTS SET SCHEMA with non-existing table bug

  * Fixes CREATE INDEX CONCURRENTLY with no index name on a postgres table bug

  * Fixes a crash because of overflow in partition id with certain compile flags

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Mon, 27 Jul 2020 7:28:18 +0000

citus (9.3.4.citus-1) stable; urgency=low

  * Fixes a bug that could cause crashes with certain compile flags

  * Fixes a bug with lists of configuration values in ALTER ROLE SET statements

  * Fixes deparsing for queries with anonymous column references

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 22 Jul 2020 9:00:01 +0000

citus (9.3.3.citus-1) stable; urgency=low

  * Fixes a memory leak in subtransaction memory handling

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Mon, 13 Jul 2020 8:47:40 +0000

citus (9.3.0.citus-1) stable; urgency=low

  * Adds max_shared_pool_size to control number of connections across sessions

  * Adds support for window functions on coordinator

  * Improves shard pruning logic to understand OR-conditions

  * Prevents using an extra connection for intermediate result multi-casts

  * Adds propagation of ALTER ROLE .. SET statements

  * Adds update_distributed_table_colocation UDF to update colocation of tables

  * Introduces a UDF to truncate local data after distributing a table

  * Adds support for creating temp schemas in parallel

  * Adds support for evaluation of nextval in the target list on coordinator

  * Adds support for local execution of COPY/TRUNCATE/DROP/DDL commands

  * Adds support for local execution of shard creation

  * Uses local execution in a transaction block

  * Adds support for querying distributed table sizes concurrently

  * Allows master_copy_shard_placement to replicate placements to new nodes

  * Allows table type to be used in target list

  * Avoids having multiple maintenance daemons active for a single database

  * Defers reference table replication to shard creation time

  * Enables joins between local tables and reference tables in transaction blocks

  * Ignores pruned target list entries in coordinator plan

  * Improves SIGTERM handling of maintenance daemon

  * Increases the default of citus.node_connection_timeout to 30 seconds

  * Fixes a bug that occurs when creating remote tasks in local execution

  * Fixes a bug that causes some DML queries containing aggregates to fail

  * Fixes a bug that could cause failures in queries with subqueries or CTEs

  * Fixes a bug that may cause some connection failures to throw errors

  * Fixes a bug which caused queries with SRFs and function evalution to fail

  * Fixes a bug with generated columns when executing COPY dist_table TO file

  * Fixes a crash when using non-constant limit clauses

  * Fixes a failure when composite types used in prepared statements

  * Fixes a possible segfault when dropping dist. table in a transaction block

  * Fixes a possible segfault when non-pushdownable aggs are solely used in HAVING

  * Fixes a segfault when executing queries using GROUPING

  * Fixes an error when using LEFT JOIN with GROUP BY on primary key

  * Fixes an issue with distributing tables having generated cols not at the end

  * Fixes automatic SSL permission issue when using "initdb --allow-group-access"

  * Fixes errors which could occur when subqueries are parameters to aggregates

  * Fixes possible issues by invalidating the plan cache in master_update_node

  * Fixes timing issues which could be caused by changing system clock

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Thu, 7 May 2020 15:11:25 +0000

citus (9.2.4.citus-1) stable; urgency=low

  * Fixes a release problem in 9.2.3

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Tue, 31 Mar 2020 08:06:59 +0000

citus (9.2.3.citus-1) stable; urgency=low

  * Do not use C functions that have been banned by Microsoft

  * Fixes a bug that causes wrong results with complex outer joins

  * Fixes issues found using static analysis

  * Fixes left join shard pruning in pushdown planner

  * Fixes possibility for segmentation fault in internal aggregate functions

  * Fixes possible segfault when non pushdownable aggregates are used in HAVING

  * Improves correctness of planning subqueries in HAVING

  * Prevents using old connections for security if citus.node_conninfo changed

  * Uses Microsoft approved cipher string for default TLS setup

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Thu, 26 Mar 2020 8:22:48 +0000

citus (9.0.2.citus-1) stable; urgency=low

  * Fixes build errors on EL/OL 6 based distros

  * Fixes a bug that caused maintenance daemon to fail on standby nodes

  * Disallows distributed function creation when replication_model is `statement`

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Fri, 6 Mar 2020 14:10:16 +0000

citus (9.2.2.citus-1) stable; urgency=low

  * Fixes a bug that caused some prepared stmts with function calls to fail

  * Fixes a bug that caused some prepared stmts with composite types to fail

  * Fixes a bug that caused missing subplan results in workers

  * Improves performance of re-partition joins

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Fri, 6 Mar 2020 07:14:20 +0000

citus (9.2.1.citus-1) stable; urgency=low

  * Fixes a bug that could cause crashes if distribution key is NULL

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Fri, 14 Feb 2020 11:51:09 +0000

citus (9.2.0.citus-1) stable; urgency=low

  * Adds support for INSERT...SELECT queries with re-partitioning

  * Adds citus.coordinator_aggregation_strategy to support more aggregates

  * Adds caching of local plans on shards for Citus MX

  * Adds compatibility support for dist. object infrastructure from old versions

  * Adds defering shard-pruning for fast-path router queries to execution

  * Adds propagation of GRANT ... ON SCHEMA queries

  * Adds support for CTE pushdown via CTE inlining in distributed planning

  * Adds support for ALTER TABLE ... SET SCHEMA propagation.

  * Adds support for DROP ROUTINE & ALTER ROUTINE commands

  * Adds support for any inner join on a reference table

  * Changes citus.log_remote_commands level to NOTICE

  * Disallows marking ref. table shards unhealthy in the presence of savepoints

  * Disallows placing new shards with shards in TO_DELETE state

  * Enables local execution of queries that do not need any data access

  * Fixes Makefile trying to cleanup PG directory during install

  * Fixes a bug causing errors when planning a query with multiple subqueries

  * Fixes a possible deadlock that could happen during shard moves

  * Fixes a problem when adding a new node due to tables referenced in func body

  * Fixes an issue that could cause joins with reference tables to be slow

  * Fixes cached metadata for shard is inconsistent issue

  * Fixes inserting multiple composite types as partition key in VALUES

  * Fixes unnecessary repartition on joins with more than 4 tables

  * Prevents wrong results for replicated partitioned tables after failure

  * Restricts LIMIT approximation for non-commutative aggregates

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 10 Feb 2020 8:48:00 +0000

citus (9.1.1.citus-1) stable; urgency=low

  * Fixes a bug causing SQL-executing UDFs to crash when passing in DDL

  * Fixes a bug that caused column_to_column_name to crash for invalid input

  * Fixes a bug that caused inserts into local tables w/ dist. subqueries to crash

  * Fixes a bug that caused some noop DML statements to fail

  * Fixes a bug that prevents dropping reference table columns

  * Fixes a crash in IN (.., NULL) queries

  * Fixes a crash when calling a distributed function from PL/pgSQL

  * Fixes an issue that caused CTEs to sometimes leak connections

  * Fixes strange errors in DML with unreachable sublinks

  * Prevents statements in SQL functions to run outside of a transaction

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Wed, 18 Dec 2019 14:32:42 +0000

citus (9.1.0.citus-1) stable; urgency=low

  * Adds extensions to distributed object propagation infrastructure

  * Adds support for ALTER ROLE propagation

  * Adds support for aggregates in create_distributed_function

  * Adds support for expressions in reference joins

  * Adds support for returning RECORD in multi-shard queries

  * Adds support for simple IN subqueries on unique cols in repartition joins

  * Adds support for subqueries in HAVING clauses

  * Automatically distributes unary aggs w/ combinefunc and non-internal stype

  * Disallows distributed func creation when replication_model is 'statement'

  * Drops support for deprecated real-time and router executors

  * Fixes a bug in local execution that could cause missing rows in RETURNING

  * Fixes a bug that caused maintenance daemon to fail on standby nodes

  * Fixes a bug that caused other CREATE EXTENSION commands to take longer

  * Fixes a bug that prevented REFRESH MATERIALIZED VIEW

  * Fixes a bug when view is used in modify statements

  * Fixes a memory leak in adaptive executor when query returns many columns

  * Fixes underflow init of default values in worker extended op node creation

  * Fixes potential segfault in standard_planner inlining functions

  * Fixes an issue that caused failures in RHEL 6 builds

  * Fixes queries with repartition joins and group by unique column

  * Improves CTE/Subquery performance by pruning intermediate rslt broadcasting

  * Removes citus.worker_list_file GUC

  * Revokes usage from the citus schema from public

 -- Onur Tirtir <Onur.Tirtir@microsoft.com>  Thu, 28 Nov 2019 15:11:05 +0000

citus (9.0.1.citus-1) stable; urgency=low

  * Fixes a memory leak in the executor

  * Revokes usage from the citus schema from public

 -- Hanefi Onaldi <Hanefi.Onaldi@microsoft.com>  Wed, 30 Oct 2019 8:53:22 +0000

citus (9.0.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 12

  * Adds UDFs to help with PostgreSQL upgrades

  * Distributes types to worker nodes

  * Introduces create_distributed_function UDF

  * Introduces local query execution for Citus MX

  * Implements infrastructure for routing CALL to MX workers

  * Implements infrastructure for routing SELECT function() to MX workers

  * Adds support for foreign key constraints between reference tables

  * Adds a feature flag to turn off CREATE TYPE propagation

  * Adds option citus.single_shard_commit_protocol

  * Adds support for EXPLAIN SUMMARY

  * Adds support for GENERATE ALWAYS AS STORED

  * Adds support for serial and smallserial in MX mode

  * Adds support for anon composite types on the target list in router queries

  * Avoids race condition between create_reference_table & master_add_node

  * Fixes a bug in schemas of distributed sequence definitions

  * Fixes a bug that caused run_command_on_colocated_placements to fail

  * Fixes a bug that leads to various issues when a connection is lost

  * Fixes a schema leak on CREATE INDEX statement

  * Fixes assert failure in bare SELECT FROM reference table FOR UPDATE in MX

  * Makes master_update_node MX compatible

  * Prevents pg_dist_colocation from multiple records for reference tables

  * Prevents segfault in worker_partition_protocol edgecase

  * Propagates ALTER FUNCTION statements for distributed functions

  * Propagates CREATE OR REPLACE FUNCTION for distributed functions

  * Propagates REINDEX on tables & indexes

  * Provides a GUC to turn of the new dependency propagation functionality

  * Uses 2PC in adaptive executor when dealing with replication factors above 1

 -- Hanefi Onaldi <Hanefi.Onaldi@microsoft.com>  Tue, 15 Oct 2019 16:54:50 +0000

citus (8.3.2.citus-1) stable; urgency=low

  * Fixes performance issues by skipping unnecessary relation access recordings

 -- Hanefi Onaldi <Hanefi.Onaldi@microsoft.com>  Fri, 9 Aug 2019 11:15:57 +0000

citus (8.3.1.citus-1) stable; urgency=low

  * Improves Adaptive Executor performance

 -- Hanefi Onaldi <Hanefi.Onaldi@microsoft.com>  Mon, 29 Jul 2019 10:25:50 +0000

citus (8.3.0.citus-1) stable; urgency=low

  * Adds a new distributed executor: Adaptive Executor

  * citus.enable_statistics_collection defaults to off (opt-in)

  * Adds support for CTEs in router planner for modification queries

  * Adds support for propagating SET LOCAL at xact start

  * Adds option to force master_update_node during failover

  * Deprecates master_modify_multiple_shards

  * Improves round robin logic on router queries

  * Creates all distributed schemas as superuser on a separate connection

  * Makes COPY adapt to connection use behaviour of previous commands

  * Replaces SESSION_LIFESPAN with configurable no. of connections at xact end

  * Propagates ALTER FOREIGN TABLE commands to workers

  * Don't schedule tasks on inactive nodes

  * Makes DROP/VALIDATE CONSTRAINT tolerant of ambiguous shard extension

  * Fixes an issue with subquery map merge jobs as non-root

  * Fixes null pointers caused by partial initialization of ConnParamsHashEntry

  * Fixes errors caused by joins with shadowed aliases

  * Fixes a regression in outer joining subqueries introduced in 8.2.0

  * Fixes a crash that can occur under high memory load

  * Fixes a bug that selects wrong worker when using round-robin assignment

  * Fixes savepoint rollback after multi-shard modify/copy failure

  * Fixes bad foreign constraint name search

  * Fixes a bug that prevents stack size to be adjusted

 -- Hanefi Onaldi <Hanefi.Onaldi@microsoft.com>  Wed, 10 Jul 2019 15:19:02 +0000

citus (8.2.2.citus-1) stable; urgency=low

  * Fixes a bug in outer joins wrapped in subqueries

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 12 Jun 2019 8:45:08 +0000

citus (8.2.1.citus-1) stable; urgency=low

  * Fixes a bug that prevents stack size to be adjusted

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 3 Apr 2019 20:56:47 +0000

citus (8.1.2.citus-1) stable; urgency=low

  * Don't do redundant ALTER TABLE consistency checks at coordinator

  * Fixes a bug that prevents stack size to be adjusted

  * Fix an issue with some DECLARE .. CURSOR WITH HOLD commands

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 3 Apr 2019 20:34:46 +0000

citus (8.2.0.citus-1) stable; urgency=low

  * Removes support and code for PostgreSQL 9.6

  * Enable more outer joins with reference tables

  * Execute CREATE INDEX CONCURRENTLY in parallel

  * Treat functions as transaction blocks

  * Add support for column aliases on join clauses

  * Skip standard_planner() for trivial queries

  * Added support for function calls in joins

  * Round-robin task assignment policy relies on local transaction id

  * Relax subquery union pushdown restrictions for reference tables

  * Speed-up run_command_on_shards()

  * Address some memory issues in connection config

  * Restrict visibility of get_*_active_transactions functions to pg_monitor

  * Don't do redundant ALTER TABLE consistency checks at coordinator

  * Queries with only intermediate results do not rely on task assignment policy

  * Finish connection establishment in parallel for multiple connections

  * Fixes a bug related to pruning shards using a coerced value

  * Fix an issue with some DECLARE .. CURSOR WITH HOLD commands

  * Fixes a bug that could lead to infinite recursion during recursive planning

  * Fixes a bug that could prevent planning full outer joins with using clause

  * Fixes a bug that could lead to memory leak on citus_relation_size

  * Fixes a problem that could cause segmentation fault with recursive planning

  * Switch CI solution to CircleCI

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 29 Mar 2019 07:36:09 +0000

citus (8.0.3.citus-1) stable; urgency=low

  * Fixes maintenance daemon panic due to unreleased spinlock

  * Fixes an issue with having clause when used with complex joins

 -- Hanefi Onaldi <hanefi@citusdata.com>  Wed, 9 Jan 2019 9:50:07 +0000

citus (8.1.1.citus-1) stable; urgency=low

  * Fixes maintenance daemon panic due to unreleased spinlock

  * Fixes an issue with having clause when used with complex joins

 -- Hanefi Onaldi <hanefi@citusdata.com>  Mon, 7 Jan 2019 16:26:13 +0000

citus (8.1.0.citus-1) stable; urgency=low

  * Turns on ssl by default for new installations of citus

  * Restricts SSL Ciphers to TLS1.2 and above

  * Adds support for INSERT INTO SELECT..ON CONFLICT/RETURNING via coordinator

  * Adds support for round-robin task assignment for queries to reference tables

  * Adds support for SQL tasks using worker_execute_sql_task UDF with task-tracker

  * Adds support for VALIDATE CONSTRAINT queries

  * Adds support for disabling hash aggregate with HLL

  * Adds user ID suffix to intermediate files generated by task-tracker

  * Only allow transmit from pgsql_job_cache directory

  * Disallows GROUPING SET clauses in subqueries

  * Removes restriction on user-defined group ID in node addition functions

  * Relaxes multi-shard modify locks when enable_deadlock_prevention is disabled

  * Improves security in task-tracker protocol

  * Improves permission checks in internal DROP TABLE functions

  * Improves permission checks in cluster management functions

  * Cleans up UDFs and fixes permission checks

  * Fixes crashes caused by stack size increase under high memory load

  * Fixes a bug that could cause maintenance daemon panic

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 18 Dec 2018 15:12:45 +0000

citus (8.0.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause maintenance daemon panic

  * Fixes crashes caused by stack size increase under high memory load

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 13 Dec 2018 13:56:44 +0000

citus (7.5.4.citus-1) stable; urgency=low

  * Fixes a bug that could cause maintenance daemon panic

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 12 Dec 2018 11:45:24 +0000

citus (8.0.1.citus-1) stable; urgency=low

  * Execute SQL tasks using worker_execute_sql_task UDF when using task-tracker

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 28 Nov 2018 11:38:47 +0000

citus (7.5.3.citus-1) stable; urgency=low

  * Execute SQL tasks using worker_execute_sql_task UDF when using task-tracker

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 28 Nov 2018 10:52:20 +0000

citus (7.5.2.citus-1) stable; urgency=low

  * Fixes inconsistent metadata error when shard metadata caching get interrupted

  * Fixes a bug that could cause memory leak

  * Fixes a bug that prevents recovering wrong transactions in MX

  * Fixes a bug to prevent wrong memory accesses on Citus MX under very high load

  * Fixes crashes caused by stack size increase under high memory load

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 14 Nov 2018 20:42:16 +0000

citus (8.0.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 11

  * Adds support for applying DML operations on reference tables from MX nodes

  * Adds distributed locking to truncated MX tables

  * Adds support for running TRUNCATE command from MX worker nodes

  * Adds views to provide insight about the distributed transactions

  * Adds support for TABLESAMPLE in router queries

  * Adds support for INCLUDE option in index creation

  * Adds option to allow simple DML commands from hot standby

  * Adds support for partitioned tables with replication factor > 1

  * Prevents a deadlock on concurrent DROP TABLE and SELECT on Citus MX

  * Fixes a bug that prevents recovering wrong transactions in MX

  * Fixes a bug to prevent wrong memory accesses on Citus MX under very high load

  * Fixes a bug in MX mode, calling DROP SCHEMA with existing partitioned table

  * Fixes a bug that could cause modifying CTEs to select wrong execution mode

  * Fixes a bug preventing rollback in CREATE PROCEDURE

  * Fixes a bug on not being able to drop index on a partitioned table

  * Fixes a bug on TRUNCATE when there is a foreign key to a reference table

  * Fixes a performance issue in prepared INSERT..SELECT

  * Fixes a bug which causes errors on DROP DATABASE IF EXISTS

  * Fixes a bug to remove intermediate result directory in pull-push execution

  * Improves query pushdown planning performance

  * Evaluate functions anywhere in query

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 02 Nov 2018 08:06:42 +0000

citus (7.5.1.citus-1) stable; urgency=low

  * Improves query pushdown planning performance

  * Fixes a bug that could cause modifying CTEs to select wrong execution mode

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 29 Aug 2018 08:06:42 +0000

citus (7.4.2.citus-1) stable; urgency=low

  * Fixes a segfault in real-time executor during online shard move

 -- Mehmet Furkan Sahin <furkan@citusdata.com>  Fri, 27 Jul 2018 13:42:27 +0000

citus (7.5.0.citus-1) stable; urgency=low

  * Adds foreign key support from hash distributed to reference tables

  * Adds SELECT ... FOR UPDATE support for router plannable queries

  * Adds support for non-partition columns in count distinct

  * Fixes a segfault in real-time executor during online shard move

  * Fixes ALTER TABLE ADD COLUMN constraint check

  * Fixes a bug where INSERT ... SELECT allows one to update dist. column

  * Allows DDL commands to be sequentialized via citus.multi_shard_modify_mode

  * Adds support for topn_union_agg and topn_add_agg across shards

  * Adds support for hll_union_agg and hll_add_agg across shards

  * Fixes a bug that might cause shards to have a wrong owner

  * Adds select_opens_transaction_block GUC

  * Adds utils to implement DDLs for policies in future

  * Makes intermediate results to use separate connections

  * Adds a node_conninfo GUC to set outgoing connection settings

 -- Mehmet Furkan Sahin <furkan@citusdata.com>  Wed, 25 Jul 2018 9:32:24 +0000

citus (6.2.6.citus-1) stable; urgency=low

  * Adds support for respecting enable_hashagg in the master planner

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 06 Jul 2018 13:30:08 +0000

citus (7.4.1.citus-1) stable; urgency=low

  * Fixes a bug that could cause txns to incorrectly proceed after failure

  * Fixes a bug on INSERT ... SELECT queries in prepared statements

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 20 Jun 2018 12:25:30 +0000

citus (7.2.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause SELECTs to crash during a rebalance

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 17 May 2018 11:51:56 +0000

citus (7.4.0.citus-1) stable; urgency=low

  * Adds support for non-pushdownable subqueries and CTEs in UPDATE/DELETE

  * Adds support for pushdownable subqueries and joins in UPDATE/DELETE

  * Adds faster shard pruning for subqueries

  * Adds partitioning support to MX table

  * Adds support for (VACUUM | ANALYZE) VERBOSE

  * Adds support for multiple ANDs in HAVING for pushdown planner

  * Adds support for quotation needy schema names

  * Improves operator check time in physical planner for custom data types

  * Removes broadcast join logic

  * Deprecates large_table_shard_count and master_expire_table_cache()

  * Modifies master_update_node to write-lock shards hosted by node over update

  * DROP TABLE now drops shards as the currrent user instead of the superuser

  * Adds specialised error codes for connection failures

  * Improves error messages on connection failure

  * Fixes issue which prevented multiple citus_table_size calls per query

  * Tests are updated to use create_distributed_table

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 15 May 2018 13:01:17 +0000

citus (7.3.0.citus-1) stable; urgency=low

  * Adds support for non-colocated joins between subqueries

  * Adds support for window functions that can be pushed down to worker

  * Adds support for modifying CTEs

  * Adds recursive plan for WHERE clause subqueries with recurring FROM clause

  * Adds support for bool_ and bit_ aggregates

  * Adds support for Postgres jsonb and json aggregation functions

  * Adds support for respecting enable_hashagg in the master plan

  * Performance improvements to reduce distributed planning time

  * Fixes a bug on planner when aggregate is used in ORDER BY

  * Fixes a bug on planner when DISTINCT (ON) clause is used with GROUP BY

  * Fixes a planner bug with distinct and aggregate clauses

  * Fixes a bug that opened new connections on each table size function call

  * Fixes a bug canceling backends not involved in distributed deadlocks

  * Fixes count distinct bug on column expressions when used with subqueries

  * Improves error handling on worker node failures

  * Improves error messages for INSERT queries that have subqueries

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 15 Mar 2018 14:16:10 +0000

citus (7.2.1.citus-1) stable; urgency=low

  * Fixes count distinct bug on column expressions when used with subqueries

  * Adds support for respecting enable_hashagg in the master plan

  * Fixes a bug canceling backends not involved in distributed deadlocks

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 06 Feb 2018 14:46:07 +0000

citus (7.2.0.citus-1) stable; urgency=low

  * Adds support for CTEs

  * Adds support for subqueries that require merge step

  * Adds support for set operations (UNION, INTERSECT, ...)

  * Adds support for 2PC auto-recovery

  * Adds support for querying local tables in CTEs and subqueries

  * Adds support for more SQL coverage in subqueries for reference tables

  * Adds support for count(distinct) in queries with a subquery

  * Adds support for non-equijoins when there is already an equijoin

  * Adds support for real-time executor to run in transaction blocks

  * Adds infrastructure for storing intermediate distributed query results

  * Adds a new GUC named enable_repartition_joins for auto executor switch

  * Adds support for limiting the intermediate result size

  * Improves support for queries with unions containing filters

  * Improves support for queries with unions containing joins

  * Improves support for subqueries in the WHERE clause

  * Increases COPY throughput

  * Enables pushing down queries containing only recurring tuples and GROUP BY

  * Load-balance queries that read from 0 shards

  * Improves support for using functions in subqueries

  * Fixes a bug that causing real-time executor to crash during cancellation

  * Fixes a bug that causing real-time executor to get stuck on cancellation

  * Fixes a bug that could block modification queries unnecessarily

  * Fixes a bug that could cause assigning wrong IDs to transactions

  * Fixes a bug that could cause an assert failure with ANALYZE statements

  * Fixes a bug that would push down wrong set operations in subqueries

  * Fixes a bug that could cause a deadlock in create_distributed_table

  * Fixes a bug that could confuse user about ANALYZE usage

  * Fixes a bug causing false positive distributed deadlock detections

  * Relaxes the locking for DDL commands on partitioned tables

  * Relaxes the locking on COPY with replication

  * Logs more remote commands when citus.log_remote_commands is set

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 16 Jan 2018 14:34:20 +0000

citus (6.2.5.citus-1) stable; urgency=low

  * Fixes a bug that could crash the coordinator while reporting a remote error

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 11 Jan 2018 11:40:28 +0000

citus (7.1.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause assigning wrong IDs to transactions

  * Increases COPY throughput

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 05 Jan 2018 09:00:07 +0000

citus (7.1.1.citus-1) stable; urgency=low

  * Fixes a bug preventing pushing down subqueries with reference tables

  * Fixes a bug that could create false positive distributed deadlocks

  * Fixes a bug that could prevent running concurrent COPY and multi-shard DDL

  * Fixes a bug that could mislead users about ANALYZE queries

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 05 Dec 2017 09:00:07 +0000

citus (7.1.0.citus-1) stable; urgency=low

  * Adds support for native queries with multi shard UPDATE/DELETE queries

  * Expands reference table support in subquery pushdown

  * Adds window function support for subqueries and INSERT ... SELECT queries

  * Adds support for COUNT(DISTINCT) [ON] queries on non-partition columns

  * Adds support for DISTINCT [ON] queries on non-partition columns

  * Introduces basic usage statistic collector

  * Adds support for setting replica identity while creating distributed tables

  * Adds support for ALTER TABLE ... REPLICA IDENTITY queries

  * Adds pushdown support for LIMIT and HAVING grouped by partition key

  * Adds support for INSERT ... SELECT queries via worker nodes on MX clusters

  * Adds support for adding primary key using already defined index

  * Adds replication parameter to shard copy functions

  * Changes shard_name UDF to omit public schema name

  * Adds master_move_node UDF to make changes on nodename/nodeport more easy

  * Fixes a bug that could cause casting error with INSERT ... SELECT queries

  * Fixes a bug that could prevent upgrading servers from Citus 6.1

  * Fixes a bug that could prevent attaching partitions to a table in schema

  * Fixes a bug preventing adding nodes to clusters with reference tables

  * Fixes a bug that could cause a crash with INSERT ... SELECT queries

  * Fixes a bug that could prevent creating a partitoned table on Cloud

  * Implements various performance improvements

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 15 Nov 2017 09:00:07 +0000

citus (7.0.3.citus-1) stable; urgency=low

  * Fixes several bugs that could cause crash

  * Fixes a bug that could cause deadlock while creating reference tables

  * Fixes a bug that could cause false-positives in deadlock detection

  * Fixes a bug that could cause  2PC recovery not to work from MX workers

  * Fixes a bug that could cause cache incohorency

  * Fixes a bug that could cause maintenance daemon to skip cache invalidations

  * Improves performance of transaction recovery by using correct index

 -- Burak Yucesoy <burak@citusdata.com>  Mon, 16 Oct 2017 11:52:07 +0000

citus (7.0.2.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 22:29:01 +0000

citus (6.2.4.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 21:31:35 +0000

citus (6.1.3.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 20:31:35 +0000

citus (7.0.1.citus-1) stable; urgency=low

  * Fixes a bug that could cause memory leaks in INSERT ... SELECT queries

  * Fixes a bug that could cause incorrect execution of prepared statements

  * Fixes a bug that could cause excessive memory usage during COPY

  * Incorporates latest changes from core PostgreSQL code

 -- Burak Yucesoy <burak@citusdata.com>  Tue, 12 Sep 2017 17:53:50 +0000

citus (7.0.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 10

  * Drops support for PostgreSQL 9.5

  * Adds support for multi-row INSERT

  * Adds support for router UPDATE and DELETE queries with subqueries

  * Adds infrastructure for distributed deadlock detection

  * Deprecates enable_deadlock_prevention flag

  * Adds support for partitioned tables

  * Adds support for creating UNLOGGED tables

  * Adds support for SAVEPOINT

  * Adds UDF citus_create_restore_point for taking distributed snapshots

  * Adds support for evaluating non-pushable INSERT ... SELECT queries

  * Adds support for subquery pushdown on reference tables

  * Adds shard pruning support for IN and ANY

  * Adds support for UPDATE and DELETE commands that prune down to 0 shard

  * Enhances transaction support by relaxing some transaction restrictions

  * Fixes a bug causing crash if distributed table has no shards

  * Fixes a bug causing crash when removing inactive node

  * Fixes a bug causing failure during COPY on tables with dropped columns

  * Fixes a bug causing failure during DROP EXTENSION

  * Fixes a bug preventing executing VACUUM and INSERT concurrently

  * Fixes a bug in prepared INSERT statements containing an implicit cast

  * Fixes several issues related to statement cancellations and connections

  * Fixes several 2PC related issues

  * Removes an unnecessary dependency causing warning messages in pg_dump

  * Adds internal infrastructure for follower clusters

  * Adds internal infrastructure for progress tracking

  * Implements various performance improvements

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Mon, 28 Aug 2017 12:27:53 +0000

citus (6.2.3.citus-1) stable; urgency=low

  * Fixes a crash during execution of local CREATE INDEX CONCURRENTLY

  * Fixes a bug preventing usage of quoted column names in COPY

  * Fixes a bug in prepared INSERTs with implicit cast in partition column

  * Relaxes locks in VACUUM to ensure concurrent execution with INSERT

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 13 Jul 2017 11:27:17 +0000

citus (6.2.2.citus-1) stable; urgency=low

  * Fixes a common cause of deadlocks when repairing tables with foreign keys

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 07 Jun 2017 09:42:17 +0000

citus (6.1.2.citus-1) stable; urgency=low

  * Fixes a common cause of deadlocks when repairing tables with foreign keys

 -- Jason Petersen <jason@citusdata.com>  Wed, 31 May 2017 16:14:11 +0000

citus (6.2.1.citus-1) stable; urgency=low

  * Relaxes version-check logic to avoid breaking non-distributed commands

 -- Jason Petersen <jason@citusdata.com>  Wed, 24 May 2017 22:36:07 +0000

citus (6.2.0.citus-1) stable; urgency=low

  * Increases SQL subquery coverage by pushing down more kinds of queries

  * Adds CustomScan API support to allow read-only transactions

  * Adds support for CREATE/DROP INDEX CONCURRENTLY

  * Adds support for ALTER TABLE ... ADD CONSTRAINT

  * Adds support for ALTER TABLE ... RENAME COLUMN

  * Adds support for DISABLE/ENABLE TRIGGER ALL

  * Adds support for expressions in the partition column in INSERTs

  * Adds support for query parameters in combination with function evaluation

  * Adds support for creating distributed tables from non-empty local tables

  * Adds UDFs to get size of distributed tables

  * Adds UDFs to add a new node without replicating reference tables

  * Adds checks to prevent running Citus binaries with wrong metadata tables

  * Improves shard pruning performance for range queries

  * Improves planner performance for joins involving co-located tables

  * Improves shard copy performance by creating indexes after copy

  * Improves task-tracker performance by batching several status checks

  * Enables router planner for queries on range partitioned table

  * Changes TRUNCATE to drop local data only if enable_ddl_propagation is off

  * Starts to execute DDL on coordinator before workers

  * Fixes a bug causing incorrectly reading invalidated cache

  * Fixes a bug related to creation of schemas in workers with incorrect owner

  * Fixes a bug related to concurrent run of shard drop functions

  * Fixes a bug related to EXPLAIN ANALYZE with DML queries

  * Fixes a bug related to SQL functions in FROM clause

  * Adds a GUC variable to report cross shard queries

  * Fixes a bug related to partition columns without native hash function

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Tue, 16 May 2017 16:05:22 +0000

citus (6.1.1.citus-1) stable; urgency=low

  * Fixes a crash caused by router executor use after connection timeouts

  * Fixes a crash caused by relation cache invalidation during COPY

  * Fixes bug related to DDL use within PL/pgSQL functions

  * Fixes a COPY bug related to types lacking binary output functions

  * Fixes a bug related to modifications with parameterized partition values

  * Fixes improper value interpolation in worker sequence generation

  * Guards shard pruning logic against zero-shard tables

  * Fixes possible NULL pointer dereference and buffer underflow, via PVS-Studio

  * Fixes a INSERT...SELECT bug that could push down non-partition column JOINs

 -- Metin Doslu <metin@citusdata.com>  Fri, 5 May 2017 17:42:00 +0000

citus (6.1.0.citus-1) stable; urgency=low

  * Implements reference tables, transactionally replicated to all nodes

  * Adds upgrade_to_reference_table UDF to upgrade pre-6.1 reference tables

  * Expands prepared statement support to nearly all statements

  * Adds support for creating VIEWs which reference distributed tables

  * Adds targeted VACUUM/ANALYZE support

  * Adds support for the FILTER clause in aggregate expressions

  * Adds support for function evaluation within INSERT INTO ... SELECT

  * Adds support for creating foreign key constraints with ALTER TABLE

  * Adds logic to choose router planner for all queries it supports

  * Enhances create_distributed_table with parameter for explicit colocation

  * Adds generally useful utility UDFs previously available as "Citus Tools"

  * Adds user-facing UDFs for locking shard resources and metadata

  * Refactors connection and transaction management for more consistency

  * Enhances COPY with fully transactional semantics

  * Improves support for cancellation for a number of queries and commands

  * Adds column_to_column_name UDF to help users understand partkey values

  * Adds master_disable_node UDF for temporarily disabling nodes

  * Adds proper MX ("masterless") metadata propagation logic

  * Adds start_metadata_sync_to_node UDF to propagate metadata changes to nodes

  * Enhances SERIAL compatibility with MX tables

  * Adds an node_connection_timeout parameter to set node connection timeouts

  * Adds enable_deadlock_prevention setting to permit multi-node transactions

  * Adds a replication_model setting to specify replication of new tables

  * Changes the shard_replication_factor setting's default value to one

  * Adds code to automatically set max_prepared_transactions if not configured

  * Accelerates lookup of colocated shard placements

  * Fixes a bug affecting INSERT INTO ... SELECT queries using constant values

  * Fixes a bug by ensuring COPY does not mark placements inactive

  * Fixes a bug affecting reads from pg_dist_shard_placement table

  * Fixes a crash triggered by creating a foreign key without a column

  * Fixes a crash related to accessing catalog tables after aborted transaction

  * Fixes a bug affecting JOIN queries requiring repartitions

  * Fixes a bug affecting node insertions to pg_dist_node table

  * Fixes a crash triggered by queries with modifying common table expressions

  * Fixes a bug affecting workloads with concurrent shard appends and deletions

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 9 Feb 2017 16:17:41 +0000

citus (6.0.1.citus-3) stable; urgency=low

  * First build using new versioning practices

 -- Jason Petersen <jason@citusdata.com>  Wed, 8 Feb 2017 23:19:46 +0000

citus (6.0.1.citus-2) stable; urgency=low

  * Transitional package to guide users to new package name

 -- Jason Petersen <jason@citusdata.com>  Mon, 6 Feb 2017 16:33:44 +0000

citus (6.0.1.citus-1) stable; urgency=low

  * Fixes a bug causing failures during pg_upgrade

  * Fixes a bug preventing DML queries during colocated table creation

  * Fixes a bug that caused NULL parameters to be incorrectly passed as text

 -- Burak Yucesoy <burak@citusdata.com>  Wed, 30 Nov 2016 15:27:38 +0000

citus (6.0.0.citus-1) stable; urgency=low

  * Adds compatibility with PostgreSQL 9.6, now the recommended version

  * Removes the pg_worker_list.conf file in favor of a pg_dist_node table

  * Adds master_add_node and master_add_node UDFs to manage membership

  * Removes the \stage command and corresponding csql binary in favor of COPY

  * Removes copy_to_distributed_table in favor of first-class COPY support

  * Adds support for multiple DDL statements within a transaction

  * Adds support for certain foreign key constraints

  * Adds support for parallel INSERT INTO ... SELECT against colocated tables

  * Adds support for the TRUNCATE command

  * Adds support for HAVING clauses in SELECT queries

  * Adds support for EXCLUDE constraints which include the partition column

  * Adds support for system columns in queries (tableoid, ctid, etc.)

  * Adds support for relation name extension within INDEX definitions

  * Adds support for no-op UPDATEs of the partition column

  * Adds several general-purpose utility UDFs to aid in Citus maintenance

  * Adds master_expire_table_cache UDF to forcibly expire cached shards

  * Parallelizes the processing of DDL commands which affect distributed tables

  * Adds support for repartition jobs using composite or custom types

  * Enhances object name extension to handle long names and large shard counts

  * Parallelizes the master_modify_multiple_shards UDF

  * Changes distributed table creation to error if target table is not empty

  * Changes the pg_dist_shard.logicalrelid column from an oid to regclass

  * Adds a placementid column to pg_dist_shard_placement, replacing Oid use

  * Removes the pg_dist_shard.shardalias distribution metadata column

  * Adds pg_dist_partition.repmodel to track tables using streaming replication

  * Adds internal infrastructure to take snapshots of distribution metadata

  * Addresses the need to invalidate prepared statements on metadata changes

  * Adds a mark_tables_colocated UDF for denoting pre-6.0 manual colocation

  * Fixes a bug affecting prepared statement execution within PL/pgSQL

  * Fixes a bug affecting COPY commands using composite types

  * Fixes a bug that could cause crashes during EXPLAIN EXECUTE

  * Separates worker and master job temporary folders

  * Eliminates race condition between distributed modification and repair

  * Relaxes the requirement that shard repairs also repair colocated shards

  * Implements internal functions to track which tables' shards are colocated

  * Adds pg_dist_partition.colocationid to track colocation group membership

  * Extends shard copy and move operations to respect colocation settings

  * Adds pg_dist_local_group to prepare for future MX-related changes

  * Adds create_distributed_table to easily create shards and infer colocation

 -- Jason Petersen <jason@citusdata.com>  Tue, 8 Nov 2016 19:45:45 +0000

citus (5.2.2.citus-1) stable; urgency=low

  * Adds support for IF NOT EXISTS clause of CREATE INDEX command

  * Adds support for RETURN QUERY and FOR ... IN PL/pgSQL features

  * Extends the router planner to handle more queries

  * Changes COUNT of zero-row sets to return 0 rather than an empty result

  * Reduces the minimum permitted task_tracker_delay to a single millisecond

  * Fixes a bug that caused crashes during joins with a WHERE false clause

  * Fixes a bug triggered by unique violation errors raised in long txns

  * Fixes a bug resulting in multiple registration of transaction callbacks

  * Fixes a bug which could result in stale reads of distribution metadata

  * Fixes a bug preventing distributed modifications in some PL/pgSQL functions

  * Fixes some code paths that could hypothetically read uninitialized memory

  * Lowers log level of "waiting for activity" messages

 -- Jason Petersen <jason@citusdata.com>  Tue, 8 Nov 2016 18:43:37 +0000

citus (5.2.1.citus-1) stable; urgency=low

  * Fixes subquery pushdown to properly extract outer join qualifiers

  * Addresses possible memory leak during multi-shard transactions

 -- Jason Petersen <jason@citusdata.com>  Tue, 6 Sep 2016 20:47:15 +0000

citus (5.2.0.citus-1) stable; urgency=low

  * Drops support for PostgreSQL 9.4; PostgreSQL 9.5 is required

  * Adds schema support for tables, named objects (types, operators, etc.)

  * Evaluates non-immutable functions on master in all modification commands

  * Adds support for SERIAL types in non-partition columns

  * Adds support for RETURNING clause in INSERT, UPDATE, and DELETE commands

  * Adds support for multi-statement transactions using a fixed set of nodes

  * Full SQL support for SELECT queries which can be executed on single worker

  * Adds option to perform DDL changes using prepared transactions (2PC)

  * Adds an enable_ddl_propagation parameter to control DDL propagation

  * Accelerates shard pruning during merges

  * Adds master_modify_multiple_shards UDF to modify many shards at once

  * Adds COPY support for arrays of user-defined types

  * Now supports parameterized prepared statements for certain use cases

  * Extends LIMIT/OFFSET support to all executor types

  * Constraint violations now fail fast rather than hitting all placements

  * Makes master_create_empty_shard aware of shard placement policy

  * Reduces unnecessary sleep during queries processed by real-time executor

  * Improves task tracker executor's task cleanup logic

  * Relaxes restrictions on cancellation of DDL commands

  * Removes ONLY keyword from worker SELECT queries

  * Error message improvements and standardization

  * Moves master_update_shard_statistics function to pg_catalog schema

  * Fixes a bug where hash-partitioned anti-joins could return bad results

  * Now sets storage type correctly for foreign table-backed shards

  * Fixes master_update_shard_statistics issue with hash-partitioned tables

  * Fixes an issue related to extending table names that require escaping

  * Reduces risk of row counter overflows during modifications

  * Fixes a crash related to FILTER clause use in COUNT DISTINCT subqueries

  * Fixes crashes related to partition columns with high attribute numbers

  * Fixes certain subquery and join crashes

  * Detects flex for build even if PostgreSQL was built without it

  * Fixes assert-enabled crash when all_modifications_commutative is true

 -- Jason Petersen <jason@citusdata.com>  Wed, 17 Aug 2016 10:23:21 +0000

citus (5.2.0~rc.1-1) testing; urgency=low

  * Release candidate for 5.2.

 -- Jason Petersen <jason@citusdata.com>  Mon, 01 Aug 2016 17:01:05 +0000

citus (5.1.1-1) stable; urgency=low

  * Adds complex count distinct expression support in repartitioned subqueries

  * Improves task tracker job cleanup logic, addressing a memory leak

  * Fixes bug that generated incorrect results for LEFT JOIN queries

  * Improves compatibility with Debian's reproducible builds project

  * Fixes build issues on FreeBSD platforms

 -- Jason Petersen <jason@citusdata.com>  Fri, 17 Jun 2016 16:20:15 +0000

citus (5.1.0-1) stable; urgency=low

  * Adds distributed COPY to rapidly populate distributed tables

  * Adds support for using EXPLAIN on distributed queries

  * Recognizes and fast-paths single-shard SELECT statements automatically

  * Increases INSERT throughput via shard pruning optimizations

  * Improves planner performance for joins involving tables with many shards

  * Adds ability to pass columns as arguments to function calls in UPDATEs

  * Introduces transaction manager for use by multi-shard commands

  * Adds COUNT(DISTINCT ...) pushdown optimization for hash-partitioned tables

  * Adds support for some UNIQUE indexes on hash- or range-partitioned tables

  * Deprecates \stage in favor of using COPY for append-partition tables

  * Deprecates copy_to_distributed_table in favor of first-class COPY support

  * Fixes build problems when using non-packaged PostgreSQL installs

  * Fixes bug that sometimes skipped pruning when partitioned by VARCHAR column

  * Fixes bug impeding use of user functions in repartitioned subqueries

  * Fixes bug involving queries with equality comparisons of boolean types

  * Fixes crash that prevented use alongside pg_stat_statements

  * Fixes crash arising from SELECT queries that lack a target list

  * Improves warning and error messages

 -- Jason Petersen <jason@citusdata.com>  Tue, 17 May 2016 16:55:02 +0000

citus (5.1.0~rc.2-1) testing; urgency=low

  * Fix EXPLAIN output when FORMAT JSON in use

 -- Jason Petersen <jason@citusdata.com>  Mon, 16 May 2016 11:08:09 +0000

citus (5.1.0~rc.1-1) testing; urgency=low

  * Release candidate for 5.1.

 -- Jason Petersen <jason@citusdata.com>  Wed, 04 May 2016 19:26:23 +0000

citus (5.0.1-1) stable; urgency=low

  * Fixes issues on 32-bit systems

 -- Jason Petersen <jason@citusdata.com>  Fri, 15 Apr 2016 19:17:35 +0000

citus (5.0.0-1) stable; urgency=low

  * Initial release

 -- Jason Petersen <jason@citusdata.com>  Thu, 24 Mar 2016 10:12:52 -0400
