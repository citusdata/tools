from enum import Enum
import yaml
import re
from typing import List, Tuple


class PackagingWarningIgnoreType(Enum):
    base = 1
    debian = 2


def validate_output(output: str, ignore_file_path: str):
    deb_ignore_list, ignore_list = parse_ignore_lists(ignore_file_path)

    output_lines = output.splitlines()
    deb_warning_lines, warning_lines = filter_warning_lines(output_lines)

    deb_warnings_to_be_raised = get_warnings_to_be_raised(deb_ignore_list, deb_warning_lines)
    warnings_to_be_raised = get_warnings_to_be_raised(ignore_list, warning_lines)

    if len(warnings_to_be_raised) > 0 or len(deb_warnings_to_be_raised) > 0:
        error_message = get_error_message(deb_warnings_to_be_raised, warnings_to_be_raised)
        raise ValueError(error_message)


def filter_warning_lines(output_lines: List[str]) -> Tuple[List[str], List[str]]:
    warning_lines = []
    deb_warning_lines = []
    is_deb_warning_line = False
    for output_line in output_lines:
        if "warning" in output_line.lower() or is_deb_warning_line:
            if "Warnings generated by release docker build" in output_line:
                is_deb_warning_line = True
                continue
            elif is_deb_warning_line:
                match = re.match(r".*: W: .*", output_line)
                if match:
                    deb_warning_lines.append(output_line)
                else:
                    is_deb_warning_line = False
            else:
                warning_lines.append(output_line)
    return warning_lines, deb_warning_lines


def parse_ignore_lists(ignore_file_path):
    base_ignore_list = []
    deb_ignore_list = []
    with open(ignore_file_path, "r") as reader:
        yaml_content = yaml.load(reader, yaml.BaseLoader)
    if PackagingWarningIgnoreType.base.name in yaml_content:
        base_ignore_list = yaml_content[PackagingWarningIgnoreType.base.name]
    if PackagingWarningIgnoreType.debian.name in yaml_content:
        deb_ignore_list = yaml_content[PackagingWarningIgnoreType.debian.name]
    return base_ignore_list, deb_ignore_list


def get_warnings_to_be_raised(ignore_list: List[str], warning_lines: List[str]) -> List[str]:
    warnings_to_be_raised = []
    for warning_line in warning_lines:
        has_ignore_match = False
        for ignore_line in ignore_list:
            if re.match(ignore_line, warning_line):
                has_ignore_match = True
                break
        if not has_ignore_match:
            warnings_to_be_raised.append(warning_line)
    return warnings_to_be_raised


def get_error_message(deb_warnings_to_be_raised, warnings_to_be_raised):
    error_message = ""
    if len(warnings_to_be_raised) > 0:
        error_message = f"{error_message}Warning lines:\n"
        for line in warnings_to_be_raised:
            error_message = f"{error_message}{line}\n"
    if len(deb_warnings_to_be_raised):
        error_message = f"{error_message}Debian Warning lines:\n"
        for line in deb_warnings_to_be_raised:
            error_message = f"{error_message}{line}\n"
    return error_message
