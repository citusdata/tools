#!/usr/bin/env bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

# constants
stdout=1
stderr=2
success=0
badusage=64

pkgauth="${PACKAGECLOUD_API_TOKEN}:"

jq=$(which jq)

# outputs usage message on specified device before exiting with provided status
usage() {
  cat <<'E_O_USAGE' >&"$1"
usage: packagecloud_downloads repo [since]

    repo : 'community' or 'enterprise'
    since : a date (optional) in YYYY-MM-DD format

packagecloud_downloads outputs CSV-formatted daily packagecloud download counts
for a given citusdata repo. The optional 'since' parameter is used to provide a
custom start date: without one, all known data is requested. packagecloud stats
can take a while to generate, as all OS/release/package/version combinations
must queried. Debian/Red Hat versions are normalized back to a presumed git tag
in order to better facilitate grouping and aggregation.
E_O_USAGE

  exit "${2}"
}

if [ "$#" -eq 1 ]; then
  if [ "${1}" = '-h' ]; then
    usage $stdout $success
  fi
  since='null'
elif [ "$#" -eq 2 ]; then
  since="\"${2//-/}Z\""
else
  usage $stderr $badusage
fi

echo '"os","release","name","pg_version","version","date","downloads"'

repo=${1}
pkgapiurl="https://packagecloud.io/api/v1/repos/citusdata/${repo}/packages.json?per_page=100"

for ((page = 1; ; page++)); do
  totalresults=$(curl -sf -u "${pkgauth}" "${pkgapiurl}&page=${page}")
  totalcount=$(echo ${totalresults} | ${jq} 'length')

  if [ "${totalcount}" -le 0 ]; then
    break
  fi

  results=$(echo "${totalresults}" | ${jq} 'include "pkg"; stripdebuginfo')
  count=$(echo ${results} | ${jq} 'length')

  for ((i = 0; i < ${count}; i++)); do
    result=$(echo ${results} | ${jq} -r --argjson i "${i}" '.[$i]')
    series_url=$(echo ${result} | ${jq} -r "include \"pkg\"; extracturl(${since})")

    curl -sf -u "${pkgauth}" "https://packagecloud.io${series_url}" |
      ${jq} --argjson r "${result}" -r 'include "pkg"; stripzeros | .[] | makerow($r) | @csv'
  done
done
