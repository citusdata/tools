#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

# constants
stderr=2
badusage=64
noservice=69

if [ "${TARGET_PLATFORM:-}" = "" ]; then
    echo TARGET_PLATFORM must be set
    exit $badusage
fi

PLATFORM_TYPE="${TARGET_PLATFORM%%/*}"
pkgauth="${PACKAGECLOUD_API_TOKEN}:"

# populate variables from packaging metadata file
# shellcheck source=/dev/null
source pkgvars

# set default values for certain packaging variables
declare pkglatest # to make shellcheck happy
nightlyref="${nightlyref:-master}"
releasepg="${releasepg:-9.6,10}"
nightlypg="${nightlypg:-}"
latestpg=$(echo "${releasepg}" | tr ',' '\n' | sort -t. -k1,1n -k2,2n | tail -n1)
versioning="${versioning:-simple}"

case "${PLATFORM_TYPE}" in
    debian|ubuntu)
        pkgflavor='deb'
        pkgname="${deb_pkgname:-${pkgname}}"
        pkgfull="postgresql-${latestpg}-${pkgname}"

        # add minor/major version to package name if using fancy versioning
        if [ "${versioning}" == 'fancy' ]; then
            suffix=$(echo "${pkglatest}" | grep -oE '^[0-9]+\.[0-9]+')
            pkgfull="postgresql-${latestpg}-${pkgname}-${suffix}"
        fi

        pkgarch="amd64"
        jqfilter='map(.version + "-" + .release)'
        ;;
    el|ol)
        pkgflavor='rpm'
        pkgname="${rpm_pkgname:-${pkgname}}"

        # add minor/major version to package name if using fancy versioning
        if [ "${versioning}" == 'fancy' ]; then
            infix=$(echo "${pkglatest}" | grep -oE '^[0-9]+\.[0-9]+' | tr -d '.')
            pkgfull="${pkgname}${infix}_${latestpg//./}"
        else
            pkgfull="${pkgname}_${latestpg//./}"
        fi

        pkgarch="x86_64"
        jqfilter='map(.version + "-" + .release | gsub("\\.centos$";"") | gsub("\\.[^.]*$";""))'
        ;;
    *)
        echo "$0: unknown package flavor -- ${pkgflavor}" >&2
        usage $stderr $badusage
        ;;
esac

hubproj="${hubproj:-${pkgname}}"

pkgapiurl="https://packagecloud.io/api/v1/repos/citusdata/${PKG_REPOTYPE}"
pkgapiurl+="/package/${pkgflavor}/${TARGET_PLATFORM}/${pkgfull}/${pkgarch}/versions.json"

response=$(curl -w '\n%{http_code}\n' -s -u "${pkgauth}" "${pkgapiurl}?per_page=1000")

httpcode=$(echo "${response}" | tail -n1)
case "${httpcode}" in
    404)
        httpbody='[]'
        ;;
    200)
        httpbody=$(echo "${response}" | sed '$d')
        ;;
    *)
        echo "$0: bad response code from packagecloud -- ${httpcode}" >&2
        exit $noservice
        ;;
esac

needrelease=$(echo "${httpbody}" | jq -r "${jqfilter} | index(\"${pkglatest}\") < 0")
if [ "${needrelease}" == "true" ]; then
    citus_package -p "${TARGET_PLATFORM}" 'local' release 2>&1 > citus_package.log
    echo "Warnings generated by release docker build :"
    grep -Ei '(warning|\bi|\be|\bw):' citus_package.log || true
    mkdir -p pkgs/releases
    shopt -s nullglob
    mv ./*/*.rpm ./*/*.deb pkgs/releases
    git clean -df -e pkgs
else
    echo 'release up to date'
fi
